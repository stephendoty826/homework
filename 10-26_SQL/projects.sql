-- SET statement_timeout = 0;
-- SET lock_timeout = 0;
-- SET client_encoding = 'UTF8';
-- SET standard_conforming_strings = on;
-- SET check_function_bodies = false;
-- SET client_min_messages = warning;
-- CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;
-- COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';
-- SET search_path = public, pg_catalog;
-- SET default_tablespace = '';
-- SET default_with_oids = false;
-- --
-- -- Name: project; Type: TABLE; Schema: public; Owner: airportyh; Tablespace:
-- --
-- CREATE TABLE project (
--     id integer NOT NULL,
--     name character varying
-- );
-- CREATE SEQUENCE project_id_seq
--     START WITH 1
--     INCREMENT BY 1
--     NO MINVALUE
--     NO MAXVALUE
--     CACHE 1;
-- ALTER SEQUENCE project_id_seq OWNED BY project.id;
-- CREATE TABLE project_uses_tech (
--     project_id integer,
--     tech_id integer
-- );
-- CREATE TABLE tech (
--     id integer NOT NULL,
--     name character varying
-- );
-- CREATE SEQUENCE tech_id_seq
--     START WITH 1
--     INCREMENT BY 1
--     NO MINVALUE
--     NO MAXVALUE
--     CACHE 1;
-- ALTER SEQUENCE tech_id_seq OWNED BY tech.id;
-- ALTER TABLE ONLY project ALTER COLUMN id SET DEFAULT nextval('project_id_seq'::regclass);
-- ALTER TABLE ONLY tech ALTER COLUMN id SET DEFAULT nextval('tech_id_seq'::regclass);
-- COPY project (id, name) FROM stdin;
-- 1	School Bus
-- 2	Medium Blog Layout
-- 3	Mozilla Front Page
-- 4	Personal Website
-- 5	Modal Dialog
-- 6	CSS Tricks Blog Layout
-- 7	Whiteboard Exercises
-- 8	RPG Hero Game
-- 9	Catch the Monster Game
-- 10	Phone Book
-- 11	Turtle Graphics Exercises
-- \.
-- SELECT pg_catalog.setval('project_id_seq', 11, true);
-- COPY project_uses_tech (project_id, tech_id) FROM stdin;
-- 1	1
-- 1	2
-- 2	1
-- 2	2
-- 3	1
-- 3	2
-- 3	9
-- 4	1
-- 4	2
-- 5	1
-- 5	2
-- 6	1
-- 6	2
-- 8	4
-- 9	4
-- 9	6
-- 10	4
-- 11	4
-- 11	5
-- 8	10
-- 9	10
-- 10	11
-- 10	12
-- \.
-- COPY tech (id, name) FROM stdin;
-- 1	HTML
-- 2	CSS
-- 3	JavaScript
-- 4	Python
-- 5	Turtle Graphics
-- 6	PyGame
-- 7	Java
-- 8	Ruby
-- 9	Bootstrap
-- 10	Objects
-- 11	File IO
-- 12	Pickle
-- \.
-- SELECT pg_catalog.setval('tech_id_seq', 12, true);
-- ALTER TABLE ONLY project
--     ADD CONSTRAINT project_pkey PRIMARY KEY (id);
-- ALTER TABLE ONLY tech
--     ADD CONSTRAINT tech_pkey PRIMARY KEY (id);
-- ALTER TABLE ONLY project_uses_tech
--     ADD CONSTRAINT project_uses_tech_project_id_fkey FOREIGN KEY (project_id) REFERENCES project(id);
-- ALTER TABLE ONLY project_uses_tech
--     ADD CONSTRAINT project_uses_tech_tech_id_fkey FOREIGN KEY (tech_id) REFERENCES tech(id);
-- REVOKE ALL ON SCHEMA public FROM PUBLIC;
-- GRANT ALL ON SCHEMA public TO PUBLIC;



-- Problems 

-- 1. Select all projects that use JavaScript?
-- SELECT *
-- FROM project
-- INNER JOIN project_uses_tech
-- ON project.id = project_id
-- INNER JOIN tech
-- ON tech_id = tech.id
-- WHERE tech.name = 'JavaScript'

-- 2. Select all technologies used by the Personal Website?
-- SELECT tech.name
-- FROM project
-- INNER JOIN project_uses_tech
-- ON project.id = project_id
-- INNER JOIN tech
-- ON tech_id = tech.id
-- WHERE project.name = 'Personal Website'

-- 3. Perform a left outer join from the tech table to the project_uses_tech table - which techs has no associated project?
-- SELECT *
-- FROM tech
-- LEFT OUTER JOIN project_uses_tech
-- ON tech.id = tech_id
-- WHERE project_id IS NULL

-- 4. Based on the previous query, get the count of the number of techs used by each project.
-- SELECT tech.name, COUNT(*)
-- FROM tech
-- LEFT OUTER JOIN project_uses_tech
-- ON tech.id = tech_id
-- GROUP BY tech.id

-- 5. Perform a left outer join from the project table to the project_users_tech table - which projects has no associated tech?
-- SELECT *
-- FROM project
-- LEFT OUTER JOIN project_uses_tech
-- ON project.id = project_id
-- WHERE tech_id IS NULL

-- 6 Based on the previous query, get the count of the number of projects that use each tech.
-- SELECT tech.name, COUNT(tech.name) AS project_count
-- FROM project
-- LEFT OUTER JOIN project_uses_tech
-- ON project.id = project_id
-- INNER JOIN tech
-- ON tech.id = tech_id
-- GROUP BY tech.name

-- 7. List all projects along with each technology used by it. You will need to do a three-way join.
-- SELECT project.name, tech.name
-- FROM project
-- LEFT OUTER JOIN project_uses_tech
-- ON project.id = project_id
-- LEFT OUTER JOIN tech
-- ON tech.id = tech_id

-- 8. List all the distinct techs that are used by at least one project.
-- SELECT tech.name
-- FROM tech
-- INNER JOIN project_uses_tech
-- ON tech.id = tech_id
-- GROUP BY tech.name

-- 9. List all the distinct techs that are not used by any projects.
-- SELECT tech.name
-- FROM tech
-- LEFT OUTER JOIN project_uses_tech
-- ON tech.id = tech_id
-- WHERE project_id IS NULL

-- 10. List all the distinct projects that use at least one tech.
-- SELECT project.name
-- FROM project
-- INNER JOIN project_uses_tech
-- ON project.id = project_id
-- GROUP BY project.name

-- 11. List all the distinct projects that use no tech.
-- SELECT *
-- FROM project
-- LEFT OUTER JOIN project_uses_tech
-- ON project.id = project_id
-- WHERE tech_id IS NULL

-- 12. Order the projects by how many tech it uses.
-- SELECT project.name, COUNT(tech_id) AS tech_count
-- FROM project
-- LEFT OUTER JOIN project_uses_tech
-- ON project.id = project_id
-- GROUP BY project.name
-- ORDER BY COUNT(tech_id) DESC

-- 13. Order the tech by how many projects use it.
-- SELECT tech.name, COUNT(project_id) AS project_count
-- FROM tech
-- LEFT OUTER JOIN project_uses_tech
-- ON tech.id = tech_id
-- GROUP BY tech.name
-- ORDER BY COUNT(project_id) DESC

-- 14. What is the average number of techs used by a project?
-- SELECT AVG(count) AS average_tech_per_project
-- FROM ( 
--     SELECT COUNT(tech_id)
--     FROM project_uses_tech
--     LEFT OUTER JOIN tech
--     ON tech.id = tech_id
--     GROUP BY project_uses_tech.project_id
--     ) AS count
